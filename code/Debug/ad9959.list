
ad9959.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080023b4  080023b4  000033b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e0  080023e0  00004024  2**0
                  CONTENTS
  4 .ARM          00000000  080023e0  080023e0  00004024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e0  080023e0  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e0  080023e0  000033e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023e4  080023e4  000033e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080023e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000024  0800240c  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800240c  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000723a  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b8  00000000  00000000  0000b287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017188  00000000  00000000  0000d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a373  00000000  00000000  00024899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081df0  00000000  00000000  0002ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b09fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001988  00000000  00000000  000b0a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b23c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	0800239c 	.word	0x0800239c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	0800239c 	.word	0x0800239c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <WriteData_AD9959>:
#include "MY_SPI.h"
#include "main.h"
#include "ad9959.h"

void WriteData_AD9959(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData,uint8_t temp)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	603a      	str	r2, [r7, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	460b      	mov	r3, r1
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	717b      	strb	r3, [r7, #5]
    uint8_t	ControlValue = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
    uint8_t	ValueToWrite = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	73bb      	strb	r3, [r7, #14]
    uint8_t	RegisterIndex = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	737b      	strb	r3, [r7, #13]
    uint8_t	i = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	733b      	strb	r3, [r7, #12]

    ControlValue = RegisterAddress;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	483c      	ldr	r0, [pc, #240]	@ (800087c <WriteData_AD9959+0x120>)
 800078c:	f000 ffd4 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <WriteData_AD9959+0x120>)
 8000796:	f000 ffcf 	bl	8001738 <HAL_GPIO_WritePin>
    for(i=0; i<8; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	733b      	strb	r3, [r7, #12]
 800079e:	e01e      	b.n	80007de <WriteData_AD9959+0x82>
    {
        HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	4835      	ldr	r0, [pc, #212]	@ (800087c <WriteData_AD9959+0x120>)
 80007a6:	f000 ffc7 	bl	8001738 <HAL_GPIO_WritePin>
        if(0x80 == (ControlValue & 0x80))
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da05      	bge.n	80007be <WriteData_AD9959+0x62>
            HAL_GPIO_WritePin(SD0_GPIO_Port,SD0_Pin,GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2180      	movs	r1, #128	@ 0x80
 80007b6:	4831      	ldr	r0, [pc, #196]	@ (800087c <WriteData_AD9959+0x120>)
 80007b8:	f000 ffbe 	bl	8001738 <HAL_GPIO_WritePin>
 80007bc:	e004      	b.n	80007c8 <WriteData_AD9959+0x6c>
        else
            HAL_GPIO_WritePin(SD0_GPIO_Port,SD0_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	482e      	ldr	r0, [pc, #184]	@ (800087c <WriteData_AD9959+0x120>)
 80007c4:	f000 ffb8 	bl	8001738 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <WriteData_AD9959+0x120>)
 80007ce:	f000 ffb3 	bl	8001738 <HAL_GPIO_WritePin>
        ControlValue <<= 1;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
    for(i=0; i<8; i++)
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	733b      	strb	r3, [r7, #12]
 80007de:	7b3b      	ldrb	r3, [r7, #12]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d9dd      	bls.n	80007a0 <WriteData_AD9959+0x44>
    }
    HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4824      	ldr	r0, [pc, #144]	@ (800087c <WriteData_AD9959+0x120>)
 80007ea:	f000 ffa5 	bl	8001738 <HAL_GPIO_WritePin>

    for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	737b      	strb	r3, [r7, #13]
 80007f2:	e031      	b.n	8000858 <WriteData_AD9959+0xfc>
    {
        ValueToWrite = RegisterData[RegisterIndex];
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	73bb      	strb	r3, [r7, #14]
        for (i=0; i<8; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	733b      	strb	r3, [r7, #12]
 8000802:	e01e      	b.n	8000842 <WriteData_AD9959+0xe6>
        {
            HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	481c      	ldr	r0, [pc, #112]	@ (800087c <WriteData_AD9959+0x120>)
 800080a:	f000 ff95 	bl	8001738 <HAL_GPIO_WritePin>
            if(0x80 == (ValueToWrite & 0x80))
 800080e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da05      	bge.n	8000822 <WriteData_AD9959+0xc6>
                HAL_GPIO_WritePin(SD0_GPIO_Port,SD0_Pin,GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <WriteData_AD9959+0x120>)
 800081c:	f000 ff8c 	bl	8001738 <HAL_GPIO_WritePin>
 8000820:	e004      	b.n	800082c <WriteData_AD9959+0xd0>
            else
                HAL_GPIO_WritePin(SD0_GPIO_Port,SD0_Pin,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	4815      	ldr	r0, [pc, #84]	@ (800087c <WriteData_AD9959+0x120>)
 8000828:	f000 ff86 	bl	8001738 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	4812      	ldr	r0, [pc, #72]	@ (800087c <WriteData_AD9959+0x120>)
 8000832:	f000 ff81 	bl	8001738 <HAL_GPIO_WritePin>
            ValueToWrite <<= 1;
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
        for (i=0; i<8; i++)
 800083c:	7b3b      	ldrb	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	733b      	strb	r3, [r7, #12]
 8000842:	7b3b      	ldrb	r3, [r7, #12]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9dd      	bls.n	8000804 <WriteData_AD9959+0xa8>
        }
        HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2120      	movs	r1, #32
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <WriteData_AD9959+0x120>)
 800084e:	f000 ff73 	bl	8001738 <HAL_GPIO_WritePin>
    for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	3301      	adds	r3, #1
 8000856:	737b      	strb	r3, [r7, #13]
 8000858:	7b7a      	ldrb	r2, [r7, #13]
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3c9      	bcc.n	80007f4 <WriteData_AD9959+0x98>
    }
    if(temp != 0)
 8000860:	797b      	ldrb	r3, [r7, #5]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <WriteData_AD9959+0x10e>
        update();
 8000866:	f000 f833 	bl	80008d0 <update>
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2110      	movs	r1, #16
 800086e:	4803      	ldr	r0, [pc, #12]	@ (800087c <WriteData_AD9959+0x120>)
 8000870:	f000 ff62 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40010800 	.word	0x40010800

08000880 <uart_receive>:
#include "stdio.h"

char page[50];
char page1[50];
void uart_receive()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    HAL_UART_Receive(&huart2,page,1,HAL_MAX_DELAY);
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	2201      	movs	r2, #1
 800088a:	4904      	ldr	r1, [pc, #16]	@ (800089c <uart_receive+0x1c>)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <uart_receive+0x20>)
 800088e:	f001 fbcb 	bl	8002028 <HAL_UART_Receive>
    HAL_Delay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fcc4 	bl	8001220 <HAL_Delay>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000040 	.word	0x20000040
 80008a0:	20000080 	.word	0x20000080

080008a4 <delay1>:
uint8_t ACR_data[3] = {0x00,0x00,0x00};



void delay1 (uint32_t length)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    length = length*12;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
    while(length--);
 80008b8:	bf00      	nop
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1fa      	bne.n	80008ba <delay1+0x16>
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <update>:

void update()  //更新
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(UPDATE_GPIO_Port,UPDATE_Pin,GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <update+0x38>)
 80008dc:	f000 ff2c 	bl	8001738 <HAL_GPIO_WritePin>
    delay1(2);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff ffdf 	bl	80008a4 <delay1>
    HAL_GPIO_WritePin(UPDATE_GPIO_Port,UPDATE_Pin,GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ec:	4806      	ldr	r0, [pc, #24]	@ (8000908 <update+0x38>)
 80008ee:	f000 ff23 	bl	8001738 <HAL_GPIO_WritePin>
    delay1(4);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f7ff ffd6 	bl	80008a4 <delay1>
    HAL_GPIO_WritePin(UPDATE_GPIO_Port,UPDATE_Pin,GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fe:	4802      	ldr	r0, [pc, #8]	@ (8000908 <update+0x38>)
 8000900:	f000 ff1a 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010800 	.word	0x40010800

0800090c <IO_Init>:


void IO_Init(void)  //IO口初始化
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PDC_GPIO_Port,PDC_Pin,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000916:	481f      	ldr	r0, [pc, #124]	@ (8000994 <IO_Init+0x88>)
 8000918:	f000 ff0e 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2110      	movs	r1, #16
 8000920:	481c      	ldr	r0, [pc, #112]	@ (8000994 <IO_Init+0x88>)
 8000922:	f000 ff09 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCK_GPIO_Port,SCK_Pin,GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	481a      	ldr	r0, [pc, #104]	@ (8000994 <IO_Init+0x88>)
 800092c:	f000 ff04 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(UPDATE_GPIO_Port,UPDATE_Pin,GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000936:	4817      	ldr	r0, [pc, #92]	@ (8000994 <IO_Init+0x88>)
 8000938:	f000 fefe 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P0_GPIO_Port,P0_Pin,GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	@ 0x40
 8000940:	4815      	ldr	r0, [pc, #84]	@ (8000998 <IO_Init+0x8c>)
 8000942:	f000 fef9 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P1_GPIO_Port,P1_Pin,GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	4813      	ldr	r0, [pc, #76]	@ (8000998 <IO_Init+0x8c>)
 800094c:	f000 fef4 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P2_GPIO_Port,P2_Pin,GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000956:	4810      	ldr	r0, [pc, #64]	@ (8000998 <IO_Init+0x8c>)
 8000958:	f000 feee 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P3_GPIO_Port,P3_Pin,GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <IO_Init+0x8c>)
 8000964:	f000 fee8 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SD0_GPIO_Port,SD0_Pin,GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <IO_Init+0x88>)
 800096e:	f000 fee3 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SD1_GPIO_Port,SD1_Pin,GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	4808      	ldr	r0, [pc, #32]	@ (8000998 <IO_Init+0x8c>)
 8000978:	f000 fede 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SD2_GPIO_Port,SD2_Pin,GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2110      	movs	r1, #16
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <IO_Init+0x8c>)
 8000982:	f000 fed9 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SD3_GPIO_Port,SD3_Pin,GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <IO_Init+0x8c>)
 800098c:	f000 fed4 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00

0800099c <Reset>:

void Reset(void)  //复位
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RES_GPIO_Port,RES_Pin,GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a6:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <Reset+0x38>)
 80009a8:	f000 fec6 	bl	8001738 <HAL_GPIO_WritePin>
    delay1(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff ff79 	bl	80008a4 <delay1>
    HAL_GPIO_WritePin(RES_GPIO_Port,RES_Pin,GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <Reset+0x38>)
 80009ba:	f000 febd 	bl	8001738 <HAL_GPIO_WritePin>
    delay1(30);
 80009be:	201e      	movs	r0, #30
 80009c0:	f7ff ff70 	bl	80008a4 <delay1>
    HAL_GPIO_WritePin(RES_GPIO_Port,RES_Pin,GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ca:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <Reset+0x38>)
 80009cc:	f000 feb4 	bl	8001738 <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010800 	.word	0x40010800

080009d8 <Write_frequence>:


//FTW/2^32=freq  设置频率
void Write_frequence(uint8_t channel,uint32_t freq)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
    uint32_t temp;
    temp=(uint32_t)freq*8.589934592;	   //将输入频率因子分为四个字节  8.589934592=(2^32)/1000000000
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff fe1f 	bl	8000628 <__aeabi_ui2d>
 80009ea:	a32b      	add	r3, pc, #172	@ (adr r3, 8000a98 <Write_frequence+0xc0>)
 80009ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f0:	f7ff fbae 	bl	8000150 <__aeabi_dmul>
 80009f4:	4602      	mov	r2, r0
 80009f6:	460b      	mov	r3, r1
 80009f8:	4610      	mov	r0, r2
 80009fa:	4619      	mov	r1, r3
 80009fc:	f7ff fe8e 	bl	800071c <__aeabi_d2uiz>
 8000a00:	4603      	mov	r3, r0
 8000a02:	60fb      	str	r3, [r7, #12]
    //从数组0开始发送。但实际数据是从高位到地位接收的
    CFTWO_data[3] = (uint8_t)temp;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <Write_frequence+0xc8>)
 8000a0a:	70da      	strb	r2, [r3, #3]
    CFTWO_data[2] = (uint8_t)(temp>>8);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <Write_frequence+0xc8>)
 8000a14:	709a      	strb	r2, [r3, #2]
    CFTWO_data[1] = (uint8_t)(temp>>16);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	0c1b      	lsrs	r3, r3, #16
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <Write_frequence+0xc8>)
 8000a1e:	705a      	strb	r2, [r3, #1]
    CFTWO_data[0] = (uint8_t)(temp>>24);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <Write_frequence+0xc8>)
 8000a28:	701a      	strb	r2, [r3, #0]
    switch(channel)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d827      	bhi.n	8000a80 <Write_frequence+0xa8>
 8000a30:	a201      	add	r2, pc, #4	@ (adr r2, 8000a38 <Write_frequence+0x60>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a57 	.word	0x08000a57
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a73 	.word	0x08000a73
    {
        case 0:WriteData_AD9959(CSR,1,ch0,1);break;//开启通道一
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <Write_frequence+0xcc>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fe84 	bl	800075c <WriteData_AD9959>
 8000a54:	e015      	b.n	8000a82 <Write_frequence+0xaa>
        case 1:WriteData_AD9959(CSR,1,ch1,1);break;
 8000a56:	2301      	movs	r3, #1
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <Write_frequence+0xd0>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe7d 	bl	800075c <WriteData_AD9959>
 8000a62:	e00e      	b.n	8000a82 <Write_frequence+0xaa>
        case 2:WriteData_AD9959(CSR,1,ch2,1);break;
 8000a64:	2301      	movs	r3, #1
 8000a66:	4a11      	ldr	r2, [pc, #68]	@ (8000aac <Write_frequence+0xd4>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fe76 	bl	800075c <WriteData_AD9959>
 8000a70:	e007      	b.n	8000a82 <Write_frequence+0xaa>
        case 3:WriteData_AD9959(CSR,1,ch3,1);break;
 8000a72:	2301      	movs	r3, #1
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <Write_frequence+0xd8>)
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fe6f 	bl	800075c <WriteData_AD9959>
 8000a7e:	e000      	b.n	8000a82 <Write_frequence+0xaa>
        default:break;
 8000a80:	bf00      	nop
    }
    WriteData_AD9959(CFTWO,4,CFTWO_data,1);
 8000a82:	2301      	movs	r3, #1
 8000a84:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <Write_frequence+0xc8>)
 8000a86:	2104      	movs	r1, #4
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f7ff fe67 	bl	800075c <WriteData_AD9959>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e826d695 	.word	0xe826d695
 8000a9c:	40212e0b 	.word	0x40212e0b
 8000aa0:	20000074 	.word	0x20000074
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <Write_Phase>:

//设置相位
void Write_Phase(uint8_t channel,uint16_t Phase)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
    uint16_t P_temp,tmep;
    if(Phase > 360)
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000aca:	d902      	bls.n	8000ad2 <Write_Phase+0x1e>
    {
        Phase = 360;
 8000acc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000ad0:	80bb      	strh	r3, [r7, #4]
    }
    tmep = Phase*4095/90;
 8000ad2:	88ba      	ldrh	r2, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	031b      	lsls	r3, r3, #12
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	4a25      	ldr	r2, [pc, #148]	@ (8000b70 <Write_Phase+0xbc>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	441a      	add	r2, r3
 8000ae2:	1192      	asrs	r2, r2, #6
 8000ae4:	17db      	asrs	r3, r3, #31
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	81fb      	strh	r3, [r7, #14]
    P_temp = (uint16_t)tmep;
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	81bb      	strh	r3, [r7, #12]
    CPOWO_data[1] = (uint8_t)P_temp;
 8000aee:	89bb      	ldrh	r3, [r7, #12]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <Write_Phase+0xc0>)
 8000af4:	705a      	strb	r2, [r3, #1]
    CPOWO_data[0] = (uint8_t)(P_temp >> 8);
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <Write_Phase+0xc0>)
 8000b00:	701a      	strb	r2, [r3, #0]
    switch(channel)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d827      	bhi.n	8000b58 <Write_Phase+0xa4>
 8000b08:	a201      	add	r2, pc, #4	@ (adr r2, 8000b10 <Write_Phase+0x5c>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b2f 	.word	0x08000b2f
 8000b18:	08000b3d 	.word	0x08000b3d
 8000b1c:	08000b4b 	.word	0x08000b4b
    {
        case 0:WriteData_AD9959(CSR,1,ch0,1);break;//开启通道一
 8000b20:	2301      	movs	r3, #1
 8000b22:	4a15      	ldr	r2, [pc, #84]	@ (8000b78 <Write_Phase+0xc4>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe18 	bl	800075c <WriteData_AD9959>
 8000b2c:	e015      	b.n	8000b5a <Write_Phase+0xa6>
        case 1:WriteData_AD9959(CSR,1,ch1,1);break;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <Write_Phase+0xc8>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe11 	bl	800075c <WriteData_AD9959>
 8000b3a:	e00e      	b.n	8000b5a <Write_Phase+0xa6>
        case 2:WriteData_AD9959(CSR,1,ch2,1);break;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <Write_Phase+0xcc>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fe0a 	bl	800075c <WriteData_AD9959>
 8000b48:	e007      	b.n	8000b5a <Write_Phase+0xa6>
        case 3:WriteData_AD9959(CSR,1,ch3,1);break;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <Write_Phase+0xd0>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe03 	bl	800075c <WriteData_AD9959>
 8000b56:	e000      	b.n	8000b5a <Write_Phase+0xa6>
        default:break;
 8000b58:	bf00      	nop
    }
    WriteData_AD9959(CPOWO,2,CPOWO_data,1);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <Write_Phase+0xc0>)
 8000b5e:	2102      	movs	r1, #2
 8000b60:	2005      	movs	r0, #5
 8000b62:	f7ff fdfb 	bl	800075c <WriteData_AD9959>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	b60b60b7 	.word	0xb60b60b7
 8000b74:	20000078 	.word	0x20000078
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <Write_Amplitude>:
//设置幅度
void Write_Amplitude(uint8_t channel,uint16_t Amplitude)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	80bb      	strh	r3, [r7, #4]
    uint16_t A_temp, temp;
    if(Amplitude > 550)
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	f240 2226 	movw	r2, #550	@ 0x226
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d902      	bls.n	8000ba8 <Write_Amplitude+0x20>
    {
        Amplitude = 550;
 8000ba2:	f240 2326 	movw	r3, #550	@ 0x226
 8000ba6:	80bb      	strh	r3, [r7, #4]
    }
    temp = Amplitude*1023/550;
 8000ba8:	88ba      	ldrh	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	029b      	lsls	r3, r3, #10
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <Write_Amplitude+0xcc>)
 8000bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb6:	1212      	asrs	r2, r2, #8
 8000bb8:	17db      	asrs	r3, r3, #31
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	81fb      	strh	r3, [r7, #14]
    if(temp > 1023)
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bc4:	d302      	bcc.n	8000bcc <Write_Amplitude+0x44>
    {
        temp=1023;
 8000bc6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000bca:	81fb      	strh	r3, [r7, #14]
    }
    A_temp = temp | 0x1000;
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd2:	81bb      	strh	r3, [r7, #12]
    ACR_data[2] = (uint8_t)A_temp;
 8000bd4:	89bb      	ldrh	r3, [r7, #12]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <Write_Amplitude+0xd0>)
 8000bda:	709a      	strb	r2, [r3, #2]
    ACR_data[1] = (uint8_t)(A_temp >> 8);
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <Write_Amplitude+0xd0>)
 8000be6:	705a      	strb	r2, [r3, #1]
    switch(channel)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d826      	bhi.n	8000c3c <Write_Amplitude+0xb4>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <Write_Amplitude+0x6c>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000c13 	.word	0x08000c13
 8000bfc:	08000c21 	.word	0x08000c21
 8000c00:	08000c2f 	.word	0x08000c2f
        {
            case 0:WriteData_AD9959(CSR,1,ch0,1);break;//开启通道一
 8000c04:	2301      	movs	r3, #1
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <Write_Amplitude+0xd4>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fda6 	bl	800075c <WriteData_AD9959>
 8000c10:	e015      	b.n	8000c3e <Write_Amplitude+0xb6>
            case 1:WriteData_AD9959(CSR,1,ch1,1);break;
 8000c12:	2301      	movs	r3, #1
 8000c14:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <Write_Amplitude+0xd8>)
 8000c16:	2101      	movs	r1, #1
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fd9f 	bl	800075c <WriteData_AD9959>
 8000c1e:	e00e      	b.n	8000c3e <Write_Amplitude+0xb6>
            case 2:WriteData_AD9959(CSR,1,ch2,1);break;
 8000c20:	2301      	movs	r3, #1
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <Write_Amplitude+0xdc>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd98 	bl	800075c <WriteData_AD9959>
 8000c2c:	e007      	b.n	8000c3e <Write_Amplitude+0xb6>
            case 3:WriteData_AD9959(CSR,1,ch3,1);break;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <Write_Amplitude+0xe0>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fd91 	bl	800075c <WriteData_AD9959>
 8000c3a:	e000      	b.n	8000c3e <Write_Amplitude+0xb6>
            default:break;
 8000c3c:	bf00      	nop
        }
    WriteData_AD9959(ACR,3,ACR_data,1);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <Write_Amplitude+0xd0>)
 8000c42:	2103      	movs	r1, #3
 8000c44:	2006      	movs	r0, #6
 8000c46:	f7ff fd89 	bl	800075c <WriteData_AD9959>

}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	77280773 	.word	0x77280773
 8000c58:	2000007c 	.word	0x2000007c
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004
 8000c64:	20000008 	.word	0x20000008
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <ad9959_init>:

void ad9959_init()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    IO_Init();
 8000c70:	f7ff fe4c 	bl	800090c <IO_Init>
    Reset();
 8000c74:	f7ff fe92 	bl	800099c <Reset>
    delay1(20);
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f7ff fe13 	bl	80008a4 <delay1>
    WriteData_AD9959(FR1,3,FR1_data,1);
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <ad9959_init+0xb0>)
 8000c82:	2103      	movs	r1, #3
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fd69 	bl	800075c <WriteData_AD9959>
    WriteData_AD9959(FR2,2,FR2_data,1);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4a24      	ldr	r2, [pc, #144]	@ (8000d20 <ad9959_init+0xb4>)
 8000c8e:	2102      	movs	r1, #2
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff fd63 	bl	800075c <WriteData_AD9959>
    delay1(20);
 8000c96:	2014      	movs	r0, #20
 8000c98:	f7ff fe04 	bl	80008a4 <delay1>
    Write_frequence(0,1000);
 8000c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fe99 	bl	80009d8 <Write_frequence>
    Write_frequence(1,1000);
 8000ca6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fe94 	bl	80009d8 <Write_frequence>
    Write_frequence(2,1000);
 8000cb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f7ff fe8f 	bl	80009d8 <Write_frequence>
    Write_frequence(3,1000);
 8000cba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f7ff fe8a 	bl	80009d8 <Write_frequence>
    delay1(20);
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f7ff fded 	bl	80008a4 <delay1>
    Write_Amplitude(0,550);
 8000cca:	f240 2126 	movw	r1, #550	@ 0x226
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ff5a 	bl	8000b88 <Write_Amplitude>
    Write_Amplitude(1,550);
 8000cd4:	f240 2126 	movw	r1, #550	@ 0x226
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff ff55 	bl	8000b88 <Write_Amplitude>
    Write_Amplitude(2,500);
 8000cde:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f7ff ff50 	bl	8000b88 <Write_Amplitude>
    Write_Amplitude(3,500);
 8000ce8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cec:	2003      	movs	r0, #3
 8000cee:	f7ff ff4b 	bl	8000b88 <Write_Amplitude>
    delay1(20);
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f7ff fdd6 	bl	80008a4 <delay1>
    Write_Phase(0,180);
 8000cf8:	21b4      	movs	r1, #180	@ 0xb4
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff feda 	bl	8000ab4 <Write_Phase>
    Write_Phase(1,0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fed6 	bl	8000ab4 <Write_Phase>
    Write_Phase(2,0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff fed2 	bl	8000ab4 <Write_Phase>
    Write_Phase(3,0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2003      	movs	r0, #3
 8000d14:	f7ff fece 	bl	8000ab4 <Write_Phase>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000010 	.word	0x20000010
 8000d20:	20000014 	.word	0x20000014

08000d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b55      	ldr	r3, [pc, #340]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a54      	ldr	r2, [pc, #336]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b52      	ldr	r3, [pc, #328]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b4f      	ldr	r3, [pc, #316]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a4e      	ldr	r2, [pc, #312]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b46      	ldr	r3, [pc, #280]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a42      	ldr	r2, [pc, #264]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b40      	ldr	r3, [pc, #256]	@ (8000e90 <MX_GPIO_Init+0x16c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9e:	483d      	ldr	r0, [pc, #244]	@ (8000e94 <MX_GPIO_Init+0x170>)
 8000da0:	f000 fcca 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SCK_Pin|SD0_Pin|UPDATE_Pin
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 61f6 	mov.w	r1, #1968	@ 0x7b0
 8000daa:	483b      	ldr	r0, [pc, #236]	@ (8000e98 <MX_GPIO_Init+0x174>)
 8000dac:	f000 fcc4 	bl	8001738 <HAL_GPIO_WritePin>
                          |RES_Pin|PDC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD1_Pin|SD2_Pin|SD3_Pin|P0_Pin
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000db6:	4839      	ldr	r0, [pc, #228]	@ (8000e9c <MX_GPIO_Init+0x178>)
 8000db8:	f000 fcbe 	bl	8001738 <HAL_GPIO_WritePin>
                          |P1_Pin|P2_Pin|P3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	482f      	ldr	r0, [pc, #188]	@ (8000e94 <MX_GPIO_Init+0x170>)
 8000dd6:	f000 fb2b 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|SCK_Pin|SD0_Pin;
 8000dda:	23b0      	movs	r3, #176	@ 0xb0
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	4829      	ldr	r0, [pc, #164]	@ (8000e98 <MX_GPIO_Init+0x174>)
 8000df2:	f000 fb1d 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY4_Pin|KEY5_Pin|KEY2_Pin
 8000df6:	f641 4303 	movw	r3, #7171	@ 0x1c03
 8000dfa:	613b      	str	r3, [r7, #16]
                          |KEY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <MX_GPIO_Init+0x178>)
 8000e0c:	f000 fb10 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UPDATE_Pin;
 8000e10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UPDATE_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	481b      	ldr	r0, [pc, #108]	@ (8000e98 <MX_GPIO_Init+0x174>)
 8000e2a:	f000 fb01 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RES_Pin;
 8000e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <MX_GPIO_Init+0x174>)
 8000e48:	f000 faf2 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDC_Pin;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PDC_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_GPIO_Init+0x174>)
 8000e66:	f000 fae3 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD1_Pin|SD2_Pin|SD3_Pin|P0_Pin
 8000e6a:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8000e6e:	613b      	str	r3, [r7, #16]
                          |P1_Pin|P2_Pin|P3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_GPIO_Init+0x178>)
 8000e84:	f000 fad4 	bl	8001430 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 f95a 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f80e 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f7ff ff3a 	bl	8000d24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f8ba 	bl	8001028 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Init(&huart2);
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <main+0x24>)
 8000eb6:	f001 f867 	bl	8001f88 <HAL_UART_Init>
  ad9959_init();
 8000eba:	f7ff fed7 	bl	8000c6c <ad9959_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uart_receive();
 8000ebe:	f7ff fcdf 	bl	8000880 <uart_receive>
 8000ec2:	e7fc      	b.n	8000ebe <main+0x1e>
 8000ec4:	20000080 	.word	0x20000080

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	@ 0x40
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2228      	movs	r2, #40	@ 0x28
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fa34 	bl	8002344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f06:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fc29 	bl	8001768 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f1c:	f000 f819 	bl	8000f52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fe96 	bl	8001c6c <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f46:	f000 f804 	bl	8000f52 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	@ 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f56:	b672      	cpsid	i
}
 8000f58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x60>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_MspInit+0x60>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f8e8 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART2_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001060:	f000 ff92 	bl	8001f88 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f7ff ff72 	bl	8000f52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000080 	.word	0x20000080
 8001078:	40004400 	.word	0x40004400

0800107c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <HAL_UART_MspInit+0x88>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d12f      	bne.n	80010fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a6:	61d3      	str	r3, [r2, #28]
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_UART_MspInit+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010cc:	2304      	movs	r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <HAL_UART_MspInit+0x90>)
 80010e0:	f000 f9a6 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e4:	2308      	movs	r3, #8
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <HAL_UART_MspInit+0x90>)
 80010f8:	f000 f99a 	bl	8001430 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40004400 	.word	0x40004400
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff ff84 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001116:	490c      	ldr	r1, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <LoopFillZerobss+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800112c:	4c09      	ldr	r4, [pc, #36]	@ (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f001 f90b 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff feaf 	bl	8000ea0 <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800114c:	080023e8 	.word	0x080023e8
  ldr r2, =_sbss
 8001150:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001154:	200000cc 	.word	0x200000cc

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f92b 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fef2 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f935 	bl	8001416 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f90b 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000018 	.word	0x20000018
 80011e0:	20000020 	.word	0x20000020
 80011e4:	2000001c 	.word	0x2000001c

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	@ (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000020 	.word	0x20000020
 8001208:	200000c8 	.word	0x200000c8

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	200000c8 	.word	0x200000c8

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000020 	.word	0x20000020

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff49 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff5e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffb0 	bl	8001384 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	@ 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e169      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001444:	2201      	movs	r2, #1
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8158 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a9a      	ldr	r2, [pc, #616]	@ (80016d0 <HAL_GPIO_Init+0x2a0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d05e      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800146c:	4a98      	ldr	r2, [pc, #608]	@ (80016d0 <HAL_GPIO_Init+0x2a0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d875      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001472:	4a98      	ldr	r2, [pc, #608]	@ (80016d4 <HAL_GPIO_Init+0x2a4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d058      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001478:	4a96      	ldr	r2, [pc, #600]	@ (80016d4 <HAL_GPIO_Init+0x2a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d86f      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800147e:	4a96      	ldr	r2, [pc, #600]	@ (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d052      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001484:	4a94      	ldr	r2, [pc, #592]	@ (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d869      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800148a:	4a94      	ldr	r2, [pc, #592]	@ (80016dc <HAL_GPIO_Init+0x2ac>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d04c      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001490:	4a92      	ldr	r2, [pc, #584]	@ (80016dc <HAL_GPIO_Init+0x2ac>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d863      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001496:	4a92      	ldr	r2, [pc, #584]	@ (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d046      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800149c:	4a90      	ldr	r2, [pc, #576]	@ (80016e0 <HAL_GPIO_Init+0x2b0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d85d      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d82a      	bhi.n	80014fc <HAL_GPIO_Init+0xcc>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d859      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <HAL_GPIO_Init+0x80>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	08001505 	.word	0x08001505
 80014b8:	08001517 	.word	0x08001517
 80014bc:	08001559 	.word	0x08001559
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	0800155f 	.word	0x0800155f
 80014c8:	0800155f 	.word	0x0800155f
 80014cc:	0800155f 	.word	0x0800155f
 80014d0:	0800155f 	.word	0x0800155f
 80014d4:	0800155f 	.word	0x0800155f
 80014d8:	0800155f 	.word	0x0800155f
 80014dc:	0800155f 	.word	0x0800155f
 80014e0:	0800155f 	.word	0x0800155f
 80014e4:	0800155f 	.word	0x0800155f
 80014e8:	0800155f 	.word	0x0800155f
 80014ec:	0800155f 	.word	0x0800155f
 80014f0:	0800155f 	.word	0x0800155f
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001521 	.word	0x08001521
 80014fc:	4a79      	ldr	r2, [pc, #484]	@ (80016e4 <HAL_GPIO_Init+0x2b4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001502:	e02c      	b.n	800155e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e029      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	3304      	adds	r3, #4
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e024      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	3308      	adds	r3, #8
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e01f      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	330c      	adds	r3, #12
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e01a      	b.n	8001560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001532:	2304      	movs	r3, #4
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e013      	b.n	8001560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001540:	2308      	movs	r3, #8
 8001542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	611a      	str	r2, [r3, #16]
          break;
 800154a:	e009      	b.n	8001560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	615a      	str	r2, [r3, #20]
          break;
 8001556:	e003      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x130>
          break;
 800155e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	@ 0xff
 8001564:	d801      	bhi.n	800156a <HAL_GPIO_Init+0x13a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	e001      	b.n	800156e <HAL_GPIO_Init+0x13e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d802      	bhi.n	800157c <HAL_GPIO_Init+0x14c>
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x152>
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	3b08      	subs	r3, #8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	210f      	movs	r1, #15
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	6a39      	ldr	r1, [r7, #32]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80b1 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b0:	4b4d      	ldr	r3, [pc, #308]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a4c      	ldr	r2, [pc, #304]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c8:	4a48      	ldr	r2, [pc, #288]	@ (80016ec <HAL_GPIO_Init+0x2bc>)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a40      	ldr	r2, [pc, #256]	@ (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x1ec>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3f      	ldr	r2, [pc, #252]	@ (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1e8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1e4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <HAL_GPIO_Init+0x2cc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1e0>
 800160c:	2303      	movs	r3, #3
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001610:	2304      	movs	r3, #4
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 800161c:	2300      	movs	r3, #0
 800161e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162e:	492f      	ldr	r1, [pc, #188]	@ (80016ec <HAL_GPIO_Init+0x2bc>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	492c      	ldr	r1, [pc, #176]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4928      	ldr	r1, [pc, #160]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4922      	ldr	r1, [pc, #136]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	491e      	ldr	r1, [pc, #120]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4918      	ldr	r1, [pc, #96]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4914      	ldr	r1, [pc, #80]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d021      	beq.n	8001704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	490e      	ldr	r1, [pc, #56]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e021      	b.n	8001712 <HAL_GPIO_Init+0x2e2>
 80016ce:	bf00      	nop
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10310000 	.word	0x10310000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10120000 	.word	0x10120000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_GPIO_Init+0x304>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4909      	ldr	r1, [pc, #36]	@ (8001734 <HAL_GPIO_Init+0x304>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae8e 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	@ 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e272      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e24c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4b80      	ldr	r3, [pc, #512]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7f      	ldr	r2, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b7b      	ldr	r3, [pc, #492]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7a      	ldr	r2, [pc, #488]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b78      	ldr	r3, [pc, #480]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4b72      	ldr	r3, [pc, #456]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a71      	ldr	r2, [pc, #452]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6f      	ldr	r3, [pc, #444]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4b6b      	ldr	r3, [pc, #428]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b68      	ldr	r3, [pc, #416]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a67      	ldr	r2, [pc, #412]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fce2 	bl	800120c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fcde 	bl	800120c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e200      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fcce 	bl	800120c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fcca 	bl	800120c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1ec      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1c0      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4939      	ldr	r1, [pc, #228]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	@ (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fc83 	bl	800120c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fc7f 	bl	800120c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1a1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4927      	ldr	r1, [pc, #156]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fc62 	bl	800120c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fc5e 	bl	800120c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e180      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fc42 	bl	800120c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fc3e 	bl	800120c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e160      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 face 	bl	8001f4c <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fc28 	bl	800120c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff fc24 	bl	800120c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e146      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b92      	ldr	r3, [pc, #584]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b88      	ldr	r3, [pc, #544]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a87      	ldr	r2, [pc, #540]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b85      	ldr	r3, [pc, #532]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b82      	ldr	r3, [pc, #520]	@ (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b7f      	ldr	r3, [pc, #508]	@ (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7e      	ldr	r2, [pc, #504]	@ (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fbe5 	bl	800120c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff fbe1 	bl	800120c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	@ 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e103      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b75      	ldr	r3, [pc, #468]	@ (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a69      	ldr	r2, [pc, #420]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b67      	ldr	r3, [pc, #412]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a66      	ldr	r2, [pc, #408]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4b61      	ldr	r3, [pc, #388]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a60      	ldr	r2, [pc, #384]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b58      	ldr	r3, [pc, #352]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb95 	bl	800120c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fb91 	bl	800120c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0b1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fb7f 	bl	800120c <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fb7b 	bl	800120c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e09b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fb4f 	bl	800120c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fb4b 	bl	800120c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e06d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4921      	ldr	r1, [pc, #132]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a19      	ldr	r1, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	491b      	ldr	r1, [pc, #108]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb1f 	bl	800120c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fb1b 	bl	800120c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e035      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb08 	bl	800120c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fb04 	bl	800120c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e026      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e01e      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e019      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_OscConfig+0x500>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d0      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b67      	ldr	r3, [pc, #412]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4965      	ldr	r1, [pc, #404]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b8      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	4b53      	ldr	r3, [pc, #332]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b50      	ldr	r3, [pc, #320]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	494d      	ldr	r1, [pc, #308]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d040      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e073      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06b      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4936      	ldr	r1, [pc, #216]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff fa56 	bl	800120c <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7ff fa52 	bl	800120c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e053      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d210      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4922      	ldr	r1, [pc, #136]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4916      	ldr	r1, [pc, #88]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	490e      	ldr	r1, [pc, #56]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfa:	f000 f821 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	490a      	ldr	r1, [pc, #40]	@ (8001e34 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	5ccb      	ldrb	r3, [r1, r3]
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HAL_RCC_ClockConfig+0x1cc>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x1d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9b4 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	080023b4 	.word	0x080023b4
 8001e38:	20000018 	.word	0x20000018
 8001e3c:	2000001c 	.word	0x2000001c

08001e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x30>
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x36>
 8001e6e:	e027      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e70:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e72:	613b      	str	r3, [r7, #16]
      break;
 8001e74:	e027      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0c5b      	lsrs	r3, r3, #17
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e004      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	613b      	str	r3, [r7, #16]
      break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec2:	613b      	str	r3, [r7, #16]
      break;
 8001ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec6:	693b      	ldr	r3, [r7, #16]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	080023cc 	.word	0x080023cc
 8001ee0:	080023dc 	.word	0x080023dc
 8001ee4:	003d0900 	.word	0x003d0900

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b02      	ldr	r3, [pc, #8]	@ (8001ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000018 	.word	0x20000018

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f00:	f7ff fff2 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	080023c4 	.word	0x080023c4

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0adb      	lsrs	r3, r3, #11
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	@ (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	080023c4 	.word	0x080023c4

08001f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <RCC_Delay+0x34>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <RCC_Delay+0x38>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a5b      	lsrs	r3, r3, #9
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f68:	bf00      	nop
  }
  while (Delay --);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	60fa      	str	r2, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f9      	bne.n	8001f68 <RCC_Delay+0x1c>
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000018 	.word	0x20000018
 8001f84:	10624dd3 	.word	0x10624dd3

08001f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e042      	b.n	8002020 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff f864 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	@ 0x24
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f92b 	bl	8002228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af02      	add	r7, sp, #8
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	d17c      	bne.n	8002142 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_UART_Receive+0x2c>
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e075      	b.n	8002144 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2222      	movs	r2, #34	@ 0x22
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206c:	f7ff f8ce 	bl	800120c <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002086:	d108      	bne.n	800209a <HAL_UART_Receive+0x72>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e003      	b.n	80020a2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020a2:	e043      	b.n	800212c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	2120      	movs	r1, #32
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f84c 	bl	800214c <UART_WaitOnFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e042      	b.n	8002144 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10c      	bne.n	80020de <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3302      	adds	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e01f      	b.n	800211e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020e6:	d007      	beq.n	80020f8 <HAL_UART_Receive+0xd0>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_UART_Receive+0xde>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e008      	b.n	8002118 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002112:	b2da      	uxtb	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1b6      	bne.n	80020a4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b090      	sub	sp, #64	@ 0x40
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215c:	e050      	b.n	8002200 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d04c      	beq.n	8002200 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <UART_WaitOnFlagUntilTimeout+0x30>
 800216c:	f7ff f84e 	bl	800120c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002178:	429a      	cmp	r2, r3
 800217a:	d241      	bcs.n	8002200 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	e853 3f00 	ldrex	r3, [r3]
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800219c:	637a      	str	r2, [r7, #52]	@ 0x34
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021a4:	e841 2300 	strex	r3, r2, [r1]
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80021aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3314      	adds	r3, #20
 80021b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	e853 3f00 	ldrex	r3, [r3]
 80021be:	613b      	str	r3, [r7, #16]
   return(result);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3314      	adds	r3, #20
 80021ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021d0:	623a      	str	r2, [r7, #32]
 80021d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d4:	69f9      	ldr	r1, [r7, #28]
 80021d6:	6a3a      	ldr	r2, [r7, #32]
 80021d8:	e841 2300 	strex	r3, r2, [r1]
 80021dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e5      	bne.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e00f      	b.n	8002220 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	429a      	cmp	r2, r3
 800221c:	d09f      	beq.n	800215e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3740      	adds	r7, #64	@ 0x40
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002262:	f023 030c 	bic.w	r3, r3, #12
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	430b      	orrs	r3, r1
 800226e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2c      	ldr	r2, [pc, #176]	@ (800233c <UART_SetConfig+0x114>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d103      	bne.n	8002298 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002290:	f7ff fe48 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	e002      	b.n	800229e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002298:	f7ff fe30 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <UART_SetConfig+0x118>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	0119      	lsls	r1, r3, #4
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	441a      	add	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <UART_SetConfig+0x118>)
 80022d6:	fba3 0302 	umull	r0, r3, r3, r2
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2064      	movs	r0, #100	@ 0x64
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	3332      	adds	r3, #50	@ 0x32
 80022e8:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <UART_SetConfig+0x118>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f4:	4419      	add	r1, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009a      	lsls	r2, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fbb2 f2f3 	udiv	r2, r2, r3
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <UART_SetConfig+0x118>)
 800230e:	fba3 0302 	umull	r0, r3, r3, r2
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2064      	movs	r0, #100	@ 0x64
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3332      	adds	r3, #50	@ 0x32
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <UART_SetConfig+0x118>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	440a      	add	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013800 	.word	0x40013800
 8002340:	51eb851f 	.word	0x51eb851f

08002344 <memset>:
 8002344:	4603      	mov	r3, r0
 8002346:	4402      	add	r2, r0
 8002348:	4293      	cmp	r3, r2
 800234a:	d100      	bne.n	800234e <memset+0xa>
 800234c:	4770      	bx	lr
 800234e:	f803 1b01 	strb.w	r1, [r3], #1
 8002352:	e7f9      	b.n	8002348 <memset+0x4>

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	2600      	movs	r6, #0
 8002358:	4d0c      	ldr	r5, [pc, #48]	@ (800238c <__libc_init_array+0x38>)
 800235a:	4c0d      	ldr	r4, [pc, #52]	@ (8002390 <__libc_init_array+0x3c>)
 800235c:	1b64      	subs	r4, r4, r5
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	f000 f81a 	bl	800239c <_init>
 8002368:	2600      	movs	r6, #0
 800236a:	4d0a      	ldr	r5, [pc, #40]	@ (8002394 <__libc_init_array+0x40>)
 800236c:	4c0a      	ldr	r4, [pc, #40]	@ (8002398 <__libc_init_array+0x44>)
 800236e:	1b64      	subs	r4, r4, r5
 8002370:	10a4      	asrs	r4, r4, #2
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	080023e0 	.word	0x080023e0
 8002390:	080023e0 	.word	0x080023e0
 8002394:	080023e0 	.word	0x080023e0
 8002398:	080023e4 	.word	0x080023e4

0800239c <_init>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	bf00      	nop
 80023a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a2:	bc08      	pop	{r3}
 80023a4:	469e      	mov	lr, r3
 80023a6:	4770      	bx	lr

080023a8 <_fini>:
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	bf00      	nop
 80023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ae:	bc08      	pop	{r3}
 80023b0:	469e      	mov	lr, r3
 80023b2:	4770      	bx	lr
